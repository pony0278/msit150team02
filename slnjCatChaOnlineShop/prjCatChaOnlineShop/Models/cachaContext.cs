// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace prjCatChaOnlineShop.Models;

public partial class cachaContext : DbContext
{
    public cachaContext()
    {
    }

    public cachaContext(DbContextOptions<cachaContext> options)
        : base(options)
    {
    }

    public virtual DbSet<AnnouncementTypeData> AnnouncementTypeData { get; set; }

    public virtual DbSet<EcpayOrders> EcpayOrders { get; set; }

    public virtual DbSet<GameAchievementList> GameAchievementList { get; set; }

    public virtual DbSet<GameAchievementRewardList> GameAchievementRewardList { get; set; }

    public virtual DbSet<GameBanUser> GameBanUser { get; set; }

    public virtual DbSet<GameCharacterInfo> GameCharacterInfo { get; set; }

    public virtual DbSet<GameCoinExchangeRecord> GameCoinExchangeRecord { get; set; }

    public virtual DbSet<GameFriendData> GameFriendData { get; set; }

    public virtual DbSet<GameFriendListChatData> GameFriendListChatData { get; set; }

    public virtual DbSet<GameGlobalChatData> GameGlobalChatData { get; set; }

    public virtual DbSet<GameItemPurchaseRecord> GameItemPurchaseRecord { get; set; }

    public virtual DbSet<GameMemberBMessageData> GameMemberBMessageData { get; set; }

    public virtual DbSet<GameMemberTask> GameMemberTask { get; set; }

    public virtual DbSet<GameMessageData> GameMessageData { get; set; }

    public virtual DbSet<GameMessageDatas> GameMessageDatas { get; set; }

    public virtual DbSet<GamePet> GamePet { get; set; }

    public virtual DbSet<GamePetTotal> GamePetTotal { get; set; }

    public virtual DbSet<GameProductCategory> GameProductCategory { get; set; }

    public virtual DbSet<GameProductTotal> GameProductTotal { get; set; }

    public virtual DbSet<GameRankData> GameRankData { get; set; }

    public virtual DbSet<GameShopAnnouncement> GameShopAnnouncement { get; set; }

    public virtual DbSet<GameShopArticleType> GameShopArticleType { get; set; }

    public virtual DbSet<GameShopBanner> GameShopBanner { get; set; }

    public virtual DbSet<GameShopBlogData> GameShopBlogData { get; set; }

    public virtual DbSet<GameTaskConditionData> GameTaskConditionData { get; set; }

    public virtual DbSet<GameTaskList> GameTaskList { get; set; }

    public virtual DbSet<MessageTypeData> MessageTypeData { get; set; }

    public virtual DbSet<Newsletter> Newsletter { get; set; }

    public virtual DbSet<NewsletterTemplate> NewsletterTemplate { get; set; }

    public virtual DbSet<ShopAppealCategoryData> ShopAppealCategoryData { get; set; }

    public virtual DbSet<ShopCaseDataTable> ShopCaseDataTable { get; set; }

    public virtual DbSet<ShopCatStatus> ShopCatStatus { get; set; }

    public virtual DbSet<ShopCatcharacter> ShopCatcharacter { get; set; }

    public virtual DbSet<ShopCommonAddressData> ShopCommonAddressData { get; set; }

    public virtual DbSet<ShopCommonShop> ShopCommonShop { get; set; }

    public virtual DbSet<ShopCommonshopName> ShopCommonshopName { get; set; }

    public virtual DbSet<ShopComplaintStatusData> ShopComplaintStatusData { get; set; }

    public virtual DbSet<ShopCouponTotal> ShopCouponTotal { get; set; }

    public virtual DbSet<ShopFavoriteDataTable> ShopFavoriteDataTable { get; set; }

    public virtual DbSet<ShopGameAdminData> ShopGameAdminData { get; set; }

    public virtual DbSet<ShopMemberComplaintCase> ShopMemberComplaintCase { get; set; }

    public virtual DbSet<ShopMemberCouponData> ShopMemberCouponData { get; set; }

    public virtual DbSet<ShopMemberInfo> ShopMemberInfo { get; set; }

    public virtual DbSet<ShopMemberStatus> ShopMemberStatus { get; set; }

    public virtual DbSet<ShopMyCatNameList> ShopMyCatNameList { get; set; }

    public virtual DbSet<ShopNavbarChild> ShopNavbarChild { get; set; }

    public virtual DbSet<ShopNavbarList> ShopNavbarList { get; set; }

    public virtual DbSet<ShopOrderDetailTable> ShopOrderDetailTable { get; set; }

    public virtual DbSet<ShopOrderStatusData> ShopOrderStatusData { get; set; }

    public virtual DbSet<ShopOrderTotalTable> ShopOrderTotalTable { get; set; }

    public virtual DbSet<ShopPaymentMethodData> ShopPaymentMethodData { get; set; }

    public virtual DbSet<ShopProductCategory> ShopProductCategory { get; set; }

    public virtual DbSet<ShopProductImageTable> ShopProductImageTable { get; set; }

    public virtual DbSet<ShopProductReviewTable> ShopProductReviewTable { get; set; }

    public virtual DbSet<ShopProductSpecification> ShopProductSpecification { get; set; }

    public virtual DbSet<ShopProductSupplier> ShopProductSupplier { get; set; }

    public virtual DbSet<ShopProductTotal> ShopProductTotal { get; set; }

    public virtual DbSet<ShopReplyData> ShopReplyData { get; set; }

    public virtual DbSet<ShopReturnDataTable> ShopReturnDataTable { get; set; }

    public virtual DbSet<ShopReturnReasonDataTable> ShopReturnReasonDataTable { get; set; }

    public virtual DbSet<ShopReturnStatusDataTable> ShopReturnStatusDataTable { get; set; }

    public virtual DbSet<ShopRoom> ShopRoom { get; set; }

    public virtual DbSet<ShopShippingMethod> ShopShippingMethod { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
        => optionsBuilder.UseSqlServer("Data Source=msit150team02resoucegroup.database.windows.net;Initial Catalog=msit150team02resoucegroup;Persist Security Info=True;User ID=msit150team02resoucegroup;Password=catcha!123");

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.UseCollation("Chinese_Taiwan_Stroke_CI_AS");

        modelBuilder.Entity<AnnouncementTypeData>(entity =>
        {
            entity.HasKey(e => e.AnnouncementTypeId).HasName("PK_公告類型資料表");

            entity.ToTable("Announcement Type Data");

            entity.Property(e => e.AnnouncementTypeId).HasColumnName("Announcement Type ID");
            entity.Property(e => e.AnnouncementTypeName).HasColumnName("Announcement Type Name");
        });

        modelBuilder.Entity<EcpayOrders>(entity =>
        {
            entity.HasKey(e => e.MerchantTradeNo);

            entity.Property(e => e.MerchantTradeNo).HasMaxLength(50);
            entity.Property(e => e.MemberId)
                .HasMaxLength(50)
                .HasColumnName("MemberID");
            entity.Property(e => e.PaymentDate).HasColumnType("datetime");
            entity.Property(e => e.PaymentType).HasMaxLength(50);
            entity.Property(e => e.PaymentTypeChargeFee).HasMaxLength(50);
            entity.Property(e => e.RtnMsg).HasMaxLength(50);
            entity.Property(e => e.ShopOrderId).HasColumnName("ShopOrderID");
            entity.Property(e => e.TradeDate).HasMaxLength(50);
            entity.Property(e => e.TradeNo).HasMaxLength(50);

            entity.HasOne(d => d.ShopOrder).WithMany(p => p.EcpayOrders)
                .HasForeignKey(d => d.ShopOrderId)
                .HasConstraintName("FK_EcpayOrders_Shop.Order Total Table");
        });

        modelBuilder.Entity<GameAchievementList>(entity =>
        {
            entity.HasKey(e => e.AchievementId).HasName("PK_Game.成就總表");

            entity.ToTable("Game.Achievement List");

            entity.Property(e => e.AchievementId).HasColumnName("Achievement ID");
            entity.Property(e => e.AchievementConditionId).HasColumnName("Achievement Condition ID");
            entity.Property(e => e.AchievementName).HasColumnName("Achievement Name");
            entity.Property(e => e.AchievementRewardId).HasColumnName("Achievement Reward ID");

            entity.HasOne(d => d.AchievementCondition).WithMany(p => p.GameAchievementList)
                .HasForeignKey(d => d.AchievementConditionId)
                .HasConstraintName("FK_Game.成就總表_Game.任務條件資料表");

            entity.HasOne(d => d.AchievementReward).WithMany(p => p.GameAchievementList)
                .HasForeignKey(d => d.AchievementRewardId)
                .HasConstraintName("FK_Game.成就總表_Game.成就獎勵總表");
        });

        modelBuilder.Entity<GameAchievementRewardList>(entity =>
        {
            entity.HasKey(e => e.AchievementRewardId).HasName("PK_Game.成就獎勵總表");

            entity.ToTable("Game.Achievement Reward List");

            entity.Property(e => e.AchievementRewardId).HasColumnName("Achievement Reward ID");
            entity.Property(e => e.AchievementRewardName).HasColumnName("Achievement Reward Name");
        });

        modelBuilder.Entity<GameBanUser>(entity =>
        {
            entity.ToTable("Game.BanUser");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.BannedTime).HasColumnType("datetime");
            entity.Property(e => e.IsBanned).HasColumnName("isBanned");
            entity.Property(e => e.MemberId).HasColumnName("MemberID");
            entity.Property(e => e.UnBannedTime)
                .HasColumnType("datetime")
                .HasColumnName("unBannedTime");
        });

        modelBuilder.Entity<GameCharacterInfo>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Game.Character Info");

            entity.Property(e => e.CharacterEquipment)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("Character Equipment");
            entity.Property(e => e.CharacterItems)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("Character Items");
            entity.Property(e => e.CharacterLevel)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("Character Level");
            entity.Property(e => e.CharacterName)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("Character Name");
            entity.Property(e => e.DiscountCoinQuantity).HasColumnName("Discount Coin Quantity");
            entity.Property(e => e.GachaTicketQuantity).HasColumnName("Gacha Ticket Quantity");
            entity.Property(e => e.GameCoinQuantity).HasColumnName("Game Coin Quantity");
            entity.Property(e => e.MemberId)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken()
                .HasColumnName("Member ID");
        });

        modelBuilder.Entity<GameCoinExchangeRecord>(entity =>
        {
            entity.HasKey(e => e.CoinExchangeRecordId).HasName("PK_Game.遊戲幣兌換紀錄");

            entity.ToTable("Game.Coin Exchange Record");

            entity.Property(e => e.CoinExchangeRecordId).HasColumnName("Coin Exchange Record ID");
            entity.Property(e => e.ExchangeQuantity).HasColumnName("Exchange Quantity");
            entity.Property(e => e.ExchangeTime)
                .HasColumnType("datetime")
                .HasColumnName("Exchange Time");
            entity.Property(e => e.MemberId).HasColumnName("Member ID");

            entity.HasOne(d => d.Member).WithMany(p => p.GameCoinExchangeRecord)
                .HasForeignKey(d => d.MemberId)
                .HasConstraintName("FK_Game.遊戲幣兌換紀錄_Shop.會員資訊");
        });

        modelBuilder.Entity<GameFriendData>(entity =>
        {
            entity.HasKey(e => e.FriendDataId).HasName("PK_Game.好友列表");

            entity.ToTable("Game.Friend Data");

            entity.Property(e => e.FriendDataId).HasColumnName("Friend Data ID");
            entity.Property(e => e.FriendId).HasColumnName("Friend ID");
            entity.Property(e => e.MemberId).HasColumnName("Member ID");

            entity.HasOne(d => d.Friend).WithMany(p => p.GameFriendDataFriend)
                .HasForeignKey(d => d.FriendId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Game.Friend Data_Shop.Member Info1");

            entity.HasOne(d => d.Member).WithMany(p => p.GameFriendDataMember)
                .HasForeignKey(d => d.MemberId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Game.Friend Data_Shop.Member Info");
        });

        modelBuilder.Entity<GameFriendListChatData>(entity =>
        {
            entity.HasKey(e => e.ChatRoomId).HasName("PK_Game.好友列表聊天室資料表");

            entity.ToTable("Game.Friend List Chat Data");

            entity.Property(e => e.ChatRoomId)
                .ValueGeneratedNever()
                .HasColumnName("Chat Room ID");
            entity.Property(e => e.FriendId).HasColumnName("Friend ID");
        });

        modelBuilder.Entity<GameGlobalChatData>(entity =>
        {
            entity.HasKey(e => e.MessageId).HasName("PK_Game.全頻道聊天資料表");

            entity.ToTable("Game.Global Chat Data");

            entity.Property(e => e.MessageId).HasColumnName("Message ID");
            entity.Property(e => e.HideMessage).HasColumnName("Hide Message");
            entity.Property(e => e.MemberId).HasColumnName("Member ID");
            entity.Property(e => e.MessageContent).HasColumnName("Message Content");
            entity.Property(e => e.SentTime)
                .HasColumnType("datetime")
                .HasColumnName("Sent Time");

            entity.HasOne(d => d.Member).WithMany(p => p.GameGlobalChatData)
                .HasForeignKey(d => d.MemberId)
                .HasConstraintName("FK_Game.全頻道聊天資料表_Shop.會員資訊");
        });

        modelBuilder.Entity<GameItemPurchaseRecord>(entity =>
        {
            entity.HasKey(e => e.GameItemPurchaseRecordId).HasName("PK_Game.物品購買紀錄表");

            entity.ToTable("Game.Item Purchase Record");

            entity.Property(e => e.GameItemPurchaseRecordId).HasColumnName("Game Item Purchase Record ID");
            entity.Property(e => e.CharacterName)
                .HasMaxLength(50)
                .HasColumnName("Character Name");
            entity.Property(e => e.ItemName)
                .HasMaxLength(50)
                .HasColumnName("Item Name");
            entity.Property(e => e.MemberId).HasColumnName("Member ID");
            entity.Property(e => e.ProductId).HasColumnName("Product ID");
            entity.Property(e => e.PurchaseTime)
                .HasMaxLength(50)
                .HasColumnName("Purchase Time");
            entity.Property(e => e.QuantityOfInGameItems).HasColumnName("Quantity Of In Game Items");

            entity.HasOne(d => d.Product).WithMany(p => p.GameItemPurchaseRecord)
                .HasForeignKey(d => d.ProductId)
                .HasConstraintName("FK_Game.物品購買紀錄表_Game.商品總表");
        });

        modelBuilder.Entity<GameMemberBMessageData>(entity =>
        {
            entity.HasKey(e => e.MemberBId).HasName("PK_Game.會員B訊息資料表");

            entity.ToTable("Game.Member B Message Data");

            entity.Property(e => e.MemberBId).HasColumnName("Member (B) ID");
            entity.Property(e => e.SentTime)
                .HasColumnType("datetime")
                .HasColumnName("Sent Time");
            entity.Property(e => e.訊息發送者內容)
                .IsRequired()
                .HasColumnName("[訊息(發送者)內容");
        });

        modelBuilder.Entity<GameMemberTask>(entity =>
        {
            entity.HasKey(e => e.MemberTaskId);

            entity.ToTable("Game.Member Task");

            entity.Property(e => e.MemberTaskId).HasColumnName("MemberTask ID");
            entity.Property(e => e.CompleteDate)
                .HasColumnType("datetime")
                .HasColumnName("Complete Date");
            entity.Property(e => e.MemberId).HasColumnName("Member ID");
            entity.Property(e => e.TaskId).HasColumnName("Task ID");

            entity.HasOne(d => d.Member).WithMany(p => p.GameMemberTask)
                .HasForeignKey(d => d.MemberId)
                .HasConstraintName("FK_Game.會員任務_Shop.會員資訊");

            entity.HasOne(d => d.Task).WithMany(p => p.GameMemberTask)
                .HasForeignKey(d => d.TaskId)
                .HasConstraintName("FK_Game.Member Task_Game.Task List");
        });

        modelBuilder.Entity<GameMessageData>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Game.Message Data");

            entity.Property(e => e.ChatRoomId).HasColumnName("Chat Room ID");
            entity.Property(e => e.MemberBId).HasColumnName("Member (B) ID");

            entity.HasOne(d => d.ChatRoom).WithMany()
                .HasForeignKey(d => d.ChatRoomId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Game.訊息資料表_Game.好友列表聊天室資料表");

            entity.HasOne(d => d.MemberB).WithMany()
                .HasForeignKey(d => d.MemberBId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Game.訊息資料表_Game.會員B訊息資料表");
        });

        modelBuilder.Entity<GameMessageDatas>(entity =>
        {
            entity.HasKey(e => e.MessageId).HasName("PK_Game.1on1訊息資料表");

            entity.ToTable("Game.MessageDatas");

            entity.Property(e => e.MessageId)
                .ValueGeneratedNever()
                .HasColumnName("MessageID");
            entity.Property(e => e.MemberId).HasColumnName("MemberID");
            entity.Property(e => e.Timestamp).HasColumnType("datetime");
        });

        modelBuilder.Entity<GamePet>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Game.Pet");

            entity.Property(e => e.PetLevelId).HasColumnName("Pet Level ID");
            entity.Property(e => e.PetRarityId).HasColumnName("Pet Rarity ID");
            entity.Property(e => e.PetSkillId).HasColumnName("Pet Skill ID");
            entity.Property(e => e.ProductId).HasColumnName("Product ID");

            entity.HasOne(d => d.Product).WithMany()
                .HasForeignKey(d => d.ProductId)
                .HasConstraintName("FK_Game.寵物_Game.商品總表");
        });

        modelBuilder.Entity<GamePetTotal>(entity =>
        {
            entity.HasKey(e => e.PetName).HasName("PK_Game.Pet");

            entity.ToTable("Game.Pet Total");

            entity.Property(e => e.PetName)
                .HasMaxLength(50)
                .HasColumnName("Pet Name");
            entity.Property(e => e.CharacterName)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("Character Name");
            entity.Property(e => e.PetLevel)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("Pet Level");
            entity.Property(e => e.PetSkill)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("Pet Skill");
        });

        modelBuilder.Entity<GameProductCategory>(entity =>
        {
            entity.HasKey(e => e.ProductCategoryId).HasName("PK_Game.商品類別表");

            entity.ToTable("Game.Product Category");

            entity.Property(e => e.ProductCategoryId).HasColumnName("Product Category ID");
            entity.Property(e => e.CategoryName)
                .HasMaxLength(50)
                .HasColumnName("Category Name");
        });

        modelBuilder.Entity<GameProductTotal>(entity =>
        {
            entity.HasKey(e => e.ProductId).HasName("PK_Game.商品總表");

            entity.ToTable("Game.Product Total");

            entity.Property(e => e.ProductId).HasColumnName("Product ID");
            entity.Property(e => e.CouponId).HasColumnName("Coupon ID");
            entity.Property(e => e.LotteryProbability)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("Lottery Probability");
            entity.Property(e => e.ProductCategoryId).HasColumnName("Product Category ID");
            entity.Property(e => e.ProductDescription)
                .HasMaxLength(50)
                .HasColumnName("Product Description");
            entity.Property(e => e.ProductImage).HasColumnName("Product Image");
            entity.Property(e => e.ProductName)
                .HasMaxLength(50)
                .HasColumnName("Product Name");
            entity.Property(e => e.ProductPrice).HasColumnName("Product Price");
            entity.Property(e => e.PurchasedQuantity)
                .HasMaxLength(50)
                .HasColumnName("Purchased Quantity");
            entity.Property(e => e.RemainingQuantity)
                .HasMaxLength(50)
                .HasColumnName("Remaining Quantity");

            entity.HasOne(d => d.ProductCategory).WithMany(p => p.GameProductTotal)
                .HasForeignKey(d => d.ProductCategoryId)
                .HasConstraintName("FK_Game.商品總表_Game.商品類別表");
        });

        modelBuilder.Entity<GameRankData>(entity =>
        {
            entity.HasKey(e => e.RankId).HasName("PK_Game.等級排位資料表");

            entity.ToTable("Game.Rank Data");

            entity.Property(e => e.RankId).HasColumnName("Rank ID");
            entity.Property(e => e.RankName).HasColumnName("Rank Name");
        });

        modelBuilder.Entity<GameShopAnnouncement>(entity =>
        {
            entity.HasKey(e => e.AnnouncementId).HasName("PK_Game.Shop公告");

            entity.ToTable("Game.ShopAnnouncement");

            entity.Property(e => e.AnnouncementId).HasColumnName("AnnouncementID");
            entity.Property(e => e.AdminId).HasColumnName("AdminID");
            entity.Property(e => e.AnnouncementImageContent)
                .IsUnicode(false)
                .HasColumnName("AnnouncementImage(Content)");
            entity.Property(e => e.AnnouncementImageHeader).HasColumnName("AnnouncementImage(Header)");
            entity.Property(e => e.AnnouncementTypeId).HasColumnName("AnnouncementType ID");
            entity.Property(e => e.EditTime).HasColumnType("datetime");
            entity.Property(e => e.HideInGameDisplay).HasColumnName("HideIn-gameDisplay");

            entity.HasOne(d => d.Admin).WithMany(p => p.GameShopAnnouncement)
                .HasForeignKey(d => d.AdminId)
                .HasConstraintName("FK_Game.Shop公告_Shop.Game 後臺管理員資料2");

            entity.HasOne(d => d.AnnouncementType).WithMany(p => p.GameShopAnnouncement)
                .HasForeignKey(d => d.AnnouncementTypeId)
                .HasConstraintName("FK_Game.Shop公告_公告類型資料表");
        });

        modelBuilder.Entity<GameShopArticleType>(entity =>
        {
            entity.HasKey(e => e.ArticleTypeId).HasName("PK_Game.shop 文章類型資料庫");

            entity.ToTable("Game.shopArticleType");

            entity.Property(e => e.ArticleTypeId).HasColumnName("ArticleTypeID");
        });

        modelBuilder.Entity<GameShopBanner>(entity =>
        {
            entity.HasKey(e => e.BannerId);

            entity.ToTable("Game.Shop.Banner");

            entity.Property(e => e.BannerId).HasColumnName("BannerID");
            entity.Property(e => e.Link).HasColumnName("link");
            entity.Property(e => e.PublishDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<GameShopBlogData>(entity =>
        {
            entity.HasKey(e => e.BlogArticleId).HasName("PK_Game.Shop部落格資料表");

            entity.ToTable("Game.Shop Blog Data");

            entity.Property(e => e.BlogArticleId).HasColumnName("Blog Article ID");
            entity.Property(e => e.AdminId).HasColumnName("Admin ID");
            entity.Property(e => e.ArticleContent).HasColumnName("Article Content");
            entity.Property(e => e.ArticleTitle).HasColumnName("Article Title");
            entity.Property(e => e.ArticleTypeId).HasColumnName("Article Type ID");
            entity.Property(e => e.DisplayStatus).HasColumnName("Display Status");
            entity.Property(e => e.PinToTop).HasColumnName("Pin to Top");
            entity.Property(e => e.PublishTime)
                .HasColumnType("datetime")
                .HasColumnName("Publish Time");
            entity.Property(e => e.SyncWithGameAndShopDisplay).HasColumnName("Sync with Game and Shop Display");

            entity.HasOne(d => d.Admin).WithMany(p => p.GameShopBlogData)
                .HasForeignKey(d => d.AdminId)
                .HasConstraintName("FK_Game.Shop部落格資料表_Shop.Game 後臺管理員資料");

            entity.HasOne(d => d.ArticleType).WithMany(p => p.GameShopBlogData)
                .HasForeignKey(d => d.ArticleTypeId)
                .HasConstraintName("FK_Game.Shop部落格資料表_Game.shop 文章類型資料庫");
        });

        modelBuilder.Entity<GameTaskConditionData>(entity =>
        {
            entity.HasKey(e => e.TaskConditionId).HasName("PK_Game.任務條件資料表");

            entity.ToTable("Game.Task Condition Data");

            entity.Property(e => e.TaskConditionId).HasColumnName("Task Condition ID");
            entity.Property(e => e.ConditionName)
                .IsRequired()
                .HasColumnName("Condition Name");
        });

        modelBuilder.Entity<GameTaskList>(entity =>
        {
            entity.HasKey(e => e.TaskId);

            entity.ToTable("Game.Task List");

            entity.Property(e => e.TaskId).HasColumnName("Task ID");
            entity.Property(e => e.TaskConditionId).HasColumnName("Task Condition ID");
            entity.Property(e => e.TaskDescription)
                .HasMaxLength(50)
                .HasColumnName("Task Description");
            entity.Property(e => e.TaskName)
                .HasMaxLength(50)
                .HasColumnName("Task Name");
            entity.Property(e => e.TaskRequireTime).HasColumnName("Task Require Time");
            entity.Property(e => e.TaskReward)
                .HasColumnType("numeric(18, 0)")
                .HasColumnName("Task Reward");

            entity.HasOne(d => d.TaskCondition).WithMany(p => p.GameTaskList)
                .HasForeignKey(d => d.TaskConditionId)
                .HasConstraintName("FK_Game.任務總表_Game.任務條件資料表");
        });

        modelBuilder.Entity<MessageTypeData>(entity =>
        {
            entity.HasKey(e => e.MessageTypeId).HasName("PK_訊息類型資料表");

            entity.ToTable("Message Type Data");

            entity.Property(e => e.MessageTypeId)
                .ValueGeneratedNever()
                .HasColumnName("Message Type ID");
            entity.Property(e => e.MessageType)
                .IsRequired()
                .HasColumnName("Message Type");
        });

        modelBuilder.Entity<Newsletter>(entity =>
        {
            entity.Property(e => e.SendDate).HasColumnType("datetime");
        });

        modelBuilder.Entity<NewsletterTemplate>(entity =>
        {
            entity.HasKey(e => e.TemplateId);
        });

        modelBuilder.Entity<ShopAppealCategoryData>(entity =>
        {
            entity.HasKey(e => e.AppealCategoryId).HasName("PK_Shop.申訴類別資料表");

            entity.ToTable("Shop.Appeal Category Data");

            entity.Property(e => e.AppealCategoryId).HasColumnName("Appeal Category ID");
            entity.Property(e => e.CategoryName).HasColumnName("Category Name");
        });

        modelBuilder.Entity<ShopCaseDataTable>(entity =>
        {
            entity.HasKey(e => e.CaseId).HasName("PK_Shop.案件資料表");

            entity.ToTable("Shop.Case Data Table");

            entity.Property(e => e.CaseId).HasColumnName("Case ID");
            entity.Property(e => e.MessageId).HasColumnName("Message ID");
        });

        modelBuilder.Entity<ShopCatStatus>(entity =>
        {
            entity.HasKey(e => e.CatId);

            entity.ToTable("Shop.CatStatus");

            entity.Property(e => e.CatId).HasColumnName("CatID");
            entity.Property(e => e.CatPersonalityId).HasColumnName("CatPersonalityID");
            entity.Property(e => e.MemberId).HasColumnName("Member ID");
            entity.Property(e => e.MyCatListId).HasColumnName("MyCatListID");

            entity.HasOne(d => d.CatPersonality).WithMany(p => p.ShopCatStatus)
                .HasForeignKey(d => d.CatPersonalityId)
                .HasConstraintName("FK_Shop.CatStatus_Shop.Catcharacter");

            entity.HasOne(d => d.Member).WithMany(p => p.ShopCatStatus)
                .HasForeignKey(d => d.MemberId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Shop.CatStatus_Shop.Member Info");

            entity.HasOne(d => d.MyCatList).WithMany(p => p.ShopCatStatus)
                .HasForeignKey(d => d.MyCatListId)
                .HasConstraintName("FK_Shop.CatStatus_Shop.MyCatNameList");
        });

        modelBuilder.Entity<ShopCatcharacter>(entity =>
        {
            entity.HasKey(e => e.CatPersonalityId);

            entity.ToTable("Shop.Catcharacter");

            entity.Property(e => e.CatPersonalityId).HasColumnName("CatPersonalityID");
            entity.Property(e => e.Personality).HasMaxLength(50);
        });

        modelBuilder.Entity<ShopCommonAddressData>(entity =>
        {
            entity.HasKey(e => e.AddressId).HasName("PK_Shop.常用地址資料表");

            entity.ToTable("Shop.Common Address Data");

            entity.Property(e => e.AddressId).HasColumnName("Address ID");
            entity.Property(e => e.MemberId).HasColumnName("Member ID");
            entity.Property(e => e.RecipientAddress).HasColumnName("Recipient Address");
            entity.Property(e => e.RecipientName)
                .HasMaxLength(50)
                .HasColumnName("Recipient Name");
            entity.Property(e => e.RecipientPhone)
                .HasMaxLength(50)
                .HasColumnName("Recipient Phone");

            entity.HasOne(d => d.Member).WithMany(p => p.ShopCommonAddressData)
                .HasForeignKey(d => d.MemberId)
                .HasConstraintName("FK_Shop.常用地址資料表_Shop.會員資訊");
        });

        modelBuilder.Entity<ShopCommonShop>(entity =>
        {
            entity.ToTable("Shop.CommonShop");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.CommShopId).HasColumnName("CommShopID");
            entity.Property(e => e.MemberId).HasColumnName("Member ID");

            entity.HasOne(d => d.CommShop).WithMany(p => p.ShopCommonShop)
                .HasForeignKey(d => d.CommShopId)
                .HasConstraintName("FK_Shop.CommonShop_Shop.CommonshopName");

            entity.HasOne(d => d.Member).WithMany(p => p.ShopCommonShop)
                .HasForeignKey(d => d.MemberId)
                .HasConstraintName("FK_Shop.CommonShop_Shop.Member Info");
        });

        modelBuilder.Entity<ShopCommonshopName>(entity =>
        {
            entity.HasKey(e => e.ShopId);

            entity.ToTable("Shop.CommonshopName");

            entity.Property(e => e.ShopId).HasColumnName("shopID");
            entity.Property(e => e.CityName).HasMaxLength(50);
            entity.Property(e => e.DiscitcName).HasMaxLength(50);
            entity.Property(e => e.ShopName).HasMaxLength(50);
        });

        modelBuilder.Entity<ShopComplaintStatusData>(entity =>
        {
            entity.HasKey(e => e.ComplaintStatusId).HasName("PK_Shop.客訴狀態資料表");

            entity.ToTable("Shop.Complaint Status Data");

            entity.Property(e => e.ComplaintStatusId).HasColumnName("Complaint Status ID");
            entity.Property(e => e.ComplaintStatusName).HasColumnName("Complaint Status Name");
        });

        modelBuilder.Entity<ShopCouponTotal>(entity =>
        {
            entity.HasKey(e => e.CouponId).HasName("PK_Shop.優惠券總表");

            entity.ToTable("Shop.Coupon Total");

            entity.Property(e => e.CouponId).HasColumnName("Coupon ID");
            entity.Property(e => e.CouponContent).HasColumnName("Coupon Content");
            entity.Property(e => e.CouponName)
                .HasMaxLength(50)
                .HasColumnName("Coupon Name");
            entity.Property(e => e.ExpiryDate)
                .HasColumnType("datetime")
                .HasColumnName("Expiry Date");
            entity.Property(e => e.SpecialOffer).HasColumnType("decimal(18, 3)");
            entity.Property(e => e.TotalQuantity).HasColumnName("Total Quantity");
        });

        modelBuilder.Entity<ShopFavoriteDataTable>(entity =>
        {
            entity.HasKey(e => e.FavoriteId).HasName("PK_Shop.我的最愛資料表");

            entity.ToTable("Shop.Favorite Data Table");

            entity.Property(e => e.FavoriteId).HasColumnName("Favorite ID");
            entity.Property(e => e.CreationDate)
                .HasColumnType("datetime")
                .HasColumnName("Creation Date");
            entity.Property(e => e.MemberId).HasColumnName("Member ID");
            entity.Property(e => e.ProductId).HasColumnName("Product ID");

            entity.HasOne(d => d.Member).WithMany(p => p.ShopFavoriteDataTable)
                .HasForeignKey(d => d.MemberId)
                .HasConstraintName("FK_Shop.我的最愛資料表_Shop.會員資訊1");

            entity.HasOne(d => d.Product).WithMany(p => p.ShopFavoriteDataTable)
                .HasForeignKey(d => d.ProductId)
                .HasConstraintName("FK_Shop.我的最愛資料表_Shop.商品總表");
        });

        modelBuilder.Entity<ShopGameAdminData>(entity =>
        {
            entity.HasKey(e => e.AdminId).HasName("PK_Shop.Game 後臺管理員資料");

            entity.ToTable("Shop.Game Admin Data");

            entity.Property(e => e.AdminId).HasColumnName("Admin ID");
            entity.Property(e => e.AdminPassword).HasColumnName("Admin Password");
            entity.Property(e => e.AdminUsername).HasColumnName("Admin Username");
        });

        modelBuilder.Entity<ShopMemberComplaintCase>(entity =>
        {
            entity.HasKey(e => e.ComplaintCaseId).HasName("PK_Shop.會員客訴案件表");

            entity.ToTable("Shop.Member Complaint Case");

            entity.Property(e => e.ComplaintCaseId).HasColumnName("Complaint Case ID");
            entity.Property(e => e.ComplaintCategoryId).HasColumnName("Complaint Category ID");
            entity.Property(e => e.ComplaintContent).HasColumnName("Complaint Content");
            entity.Property(e => e.ComplaintStatusId).HasColumnName("Complaint Status ID");
            entity.Property(e => e.ComplaintTitle).HasColumnName("Complaint Title");
            entity.Property(e => e.CreationTime)
                .HasColumnType("datetime")
                .HasColumnName("Creation Time");
            entity.Property(e => e.MemberId).HasColumnName("Member ID");

            entity.HasOne(d => d.ComplaintCategory).WithMany(p => p.ShopMemberComplaintCase)
                .HasForeignKey(d => d.ComplaintCategoryId)
                .HasConstraintName("FK_Shop.會員客訴案件表_Shop.申訴類別資料表");

            entity.HasOne(d => d.ComplaintStatus).WithMany(p => p.ShopMemberComplaintCase)
                .HasForeignKey(d => d.ComplaintStatusId)
                .HasConstraintName("FK_Shop.會員客訴案件表_Shop.客訴狀態資料表");

            entity.HasOne(d => d.Member).WithMany(p => p.ShopMemberComplaintCase)
                .HasForeignKey(d => d.MemberId)
                .HasConstraintName("FK_Shop.會員客訴案件表_Shop.會員資訊");
        });

        modelBuilder.Entity<ShopMemberCouponData>(entity =>
        {
            entity.HasKey(e => e.MemberCouponDataId).HasName("PK_Shop.會員折價券資料表_1");

            entity.ToTable("Shop.Member Coupon Data");

            entity.Property(e => e.MemberCouponDataId).HasColumnName("Member Coupon Data ID");
            entity.Property(e => e.CouponId).HasColumnName("Coupon ID");
            entity.Property(e => e.CouponStatusId).HasColumnName("Coupon Status ID");
            entity.Property(e => e.MemberId).HasColumnName("Member ID");

            entity.HasOne(d => d.Coupon).WithMany(p => p.ShopMemberCouponData)
                .HasForeignKey(d => d.CouponId)
                .HasConstraintName("FK_Shop.會員折價券資料表_Shop.優惠券總表");

            entity.HasOne(d => d.Member).WithMany(p => p.ShopMemberCouponData)
                .HasForeignKey(d => d.MemberId)
                .HasConstraintName("FK_Shop.會員折價券資料表_Shop.會員資訊");
        });

        modelBuilder.Entity<ShopMemberInfo>(entity =>
        {
            entity.HasKey(e => e.MemberId).HasName("PK_Shop.會員資訊");

            entity.ToTable("Shop.Member Info");

            entity.Property(e => e.MemberId).HasColumnName("Member ID");
            entity.Property(e => e.BannedTime).HasColumnType("datetime");
            entity.Property(e => e.Birthday).HasColumnType("date");
            entity.Property(e => e.CatCoinQuantity).HasColumnName("Cat Coin Quantity");
            entity.Property(e => e.CharacterName)
                .HasMaxLength(50)
                .HasColumnName("Character Name");
            entity.Property(e => e.FavoriteId).HasColumnName("Favorite ID");
            entity.Property(e => e.Gender).HasMaxLength(50);
            entity.Property(e => e.IsBanned).HasColumnName("isBanned");
            entity.Property(e => e.LastLoginTime)
                .HasColumnType("datetime")
                .HasColumnName("Last Login Time");
            entity.Property(e => e.LevelId).HasColumnName("Level ID");
            entity.Property(e => e.LoyaltyPoints).HasColumnName("Loyalty Points");
            entity.Property(e => e.MemberAccount)
                .HasMaxLength(50)
                .HasColumnName("Member Account");
            entity.Property(e => e.MyCatNameListId).HasColumnName("MyCatNameListID");
            entity.Property(e => e.Name).HasMaxLength(50);
            entity.Property(e => e.PhoneNumber)
                .HasMaxLength(10)
                .HasColumnName("Phone Number");
            entity.Property(e => e.RegistrationTime)
                .HasColumnType("datetime")
                .HasColumnName("Registration Time");
            entity.Property(e => e.UnBannedTime)
                .HasColumnType("datetime")
                .HasColumnName("unBannedTime");

            entity.HasOne(d => d.Level).WithMany(p => p.ShopMemberInfo)
                .HasForeignKey(d => d.LevelId)
                .HasConstraintName("FK_Shop.會員資訊_Game.等級排位資料表");

            entity.HasOne(d => d.MyCatNameList).WithMany(p => p.ShopMemberInfo)
                .HasForeignKey(d => d.MyCatNameListId)
                .HasConstraintName("FK_Shop.Member Info_Shop.MyCatNameList");
        });

        modelBuilder.Entity<ShopMemberStatus>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("Shop.MemberStatus");

            entity.Property(e => e.Status).HasMaxLength(50);
            entity.Property(e => e.StatusId).HasColumnName("StatusID");
        });

        modelBuilder.Entity<ShopMyCatNameList>(entity =>
        {
            entity.HasKey(e => e.MyCatList);

            entity.ToTable("Shop.MyCatNameList");

            entity.Property(e => e.MyCatList).ValueGeneratedNever();
            entity.Property(e => e.MemberId).HasColumnName("Member ID");

            entity.HasOne(d => d.Member).WithMany(p => p.ShopMyCatNameList)
                .HasForeignKey(d => d.MemberId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Shop.MyCatNameList_Shop.Member Info");
        });

        modelBuilder.Entity<ShopNavbarChild>(entity =>
        {
            entity.HasKey(e => e.NavbarChildId);

            entity.ToTable("Shop.NavbarChild");

            entity.Property(e => e.NavbarChildId)
                .ValueGeneratedNever()
                .HasColumnName("NavbarChildID");
            entity.Property(e => e.NavText).HasMaxLength(50);
            entity.Property(e => e.NavbarId).HasColumnName("NavbarID");

            entity.HasOne(d => d.Navbar).WithMany(p => p.ShopNavbarChild)
                .HasForeignKey(d => d.NavbarId)
                .HasConstraintName("FK_Shop.NavbarChild_Shop.NavbarList");
        });

        modelBuilder.Entity<ShopNavbarList>(entity =>
        {
            entity.HasKey(e => e.NavbarId);

            entity.ToTable("Shop.NavbarList");

            entity.Property(e => e.NavbarId).HasColumnName("NavbarID");
            entity.Property(e => e.NavbarText).HasMaxLength(50);
            entity.Property(e => e.PublishTime).HasColumnType("datetime");
        });

        modelBuilder.Entity<ShopOrderDetailTable>(entity =>
        {
            entity.HasKey(e => e.OrderDetailId).HasName("PK_Shop.訂單明細表");

            entity.ToTable("Shop.Order Detail Table");

            entity.Property(e => e.OrderDetailId).HasColumnName("Order Detail ID");
            entity.Property(e => e.OrderId).HasColumnName("Order ID");
            entity.Property(e => e.ProductId).HasColumnName("Product ID");
            entity.Property(e => e.ProductQuantity).HasColumnName("Product Quantity");

            entity.HasOne(d => d.Order).WithMany(p => p.ShopOrderDetailTable)
                .HasForeignKey(d => d.OrderId)
                .HasConstraintName("FK_Shop.Order Detail Table_Shop.Order Total Table");

            entity.HasOne(d => d.Product).WithMany(p => p.ShopOrderDetailTable)
                .HasForeignKey(d => d.ProductId)
                .HasConstraintName("FK_Shop.Order Detail Table_Shop.Product Total");
        });

        modelBuilder.Entity<ShopOrderStatusData>(entity =>
        {
            entity.HasKey(e => e.OrderStatusId).HasName("PK_Shop.訂單狀態資料表");

            entity.ToTable("Shop.Order Status Data");

            entity.Property(e => e.OrderStatusId).HasColumnName("Order Status ID");
            entity.Property(e => e.StatusName).HasColumnName("Status Name");
        });

        modelBuilder.Entity<ShopOrderTotalTable>(entity =>
        {
            entity.HasKey(e => e.OrderId).HasName("PK_Orders");

            entity.ToTable("Shop.Order Total Table");

            entity.Property(e => e.OrderId).HasColumnName("Order ID");
            entity.Property(e => e.AddressId).HasColumnName("Address ID");
            entity.Property(e => e.CouponId).HasColumnName("Coupon ID");
            entity.Property(e => e.LastUpdateTime)
                .HasColumnType("datetime")
                .HasColumnName("Last Update Time");
            entity.Property(e => e.MemberId).HasColumnName("Member ID");
            entity.Property(e => e.OrderCreationDate)
                .HasColumnType("datetime")
                .HasColumnName("Order Creation Date");
            entity.Property(e => e.OrderStatusId).HasColumnName("Order Status ID");
            entity.Property(e => e.PaymentMethodId).HasColumnName("Payment Method ID");
            entity.Property(e => e.RecipientAddress).HasColumnName("Recipient Address");
            entity.Property(e => e.RecipientName).HasColumnName("Recipient Name");
            entity.Property(e => e.RecipientPhone).HasColumnName("Recipient Phone");
            entity.Property(e => e.ResultPrice).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ShippingMethodId).HasColumnName("Shipping Method ID");

            entity.HasOne(d => d.Address).WithMany(p => p.ShopOrderTotalTable)
                .HasForeignKey(d => d.AddressId)
                .HasConstraintName("FK_Shop.Order Total Table_Shop.Common Address Data");

            entity.HasOne(d => d.Member).WithMany(p => p.ShopOrderTotalTable)
                .HasForeignKey(d => d.MemberId)
                .HasConstraintName("FK_Shop.訂單總表_Shop.會員資訊");

            entity.HasOne(d => d.OrderStatus).WithMany(p => p.ShopOrderTotalTable)
                .HasForeignKey(d => d.OrderStatusId)
                .HasConstraintName("FK_Shop.訂單總表_Shop.訂單狀態資料表");

            entity.HasOne(d => d.PaymentMethod).WithMany(p => p.ShopOrderTotalTable)
                .HasForeignKey(d => d.PaymentMethodId)
                .HasConstraintName("FK_Shop.訂單總表_Shop.付款方式資料表");

            entity.HasOne(d => d.ShippingMethod).WithMany(p => p.ShopOrderTotalTable)
                .HasForeignKey(d => d.ShippingMethodId)
                .HasConstraintName("FK_Shop.Order Total Table_Shop.Shipping Method");
        });

        modelBuilder.Entity<ShopPaymentMethodData>(entity =>
        {
            entity.HasKey(e => e.PaymentMethodId).HasName("PK_Shop.付款方式資料表");

            entity.ToTable("Shop.Payment Method Data");

            entity.Property(e => e.PaymentMethodId).HasColumnName("Payment Method ID");
            entity.Property(e => e.PaymentMethodName).HasColumnName("Payment Method Name");
        });

        modelBuilder.Entity<ShopProductCategory>(entity =>
        {
            entity.HasKey(e => e.ProductCategoryId).HasName("PK_Products.Categories");

            entity.ToTable("Shop.Product Category");

            entity.Property(e => e.ProductCategoryId).HasColumnName("Product Category ID");
            entity.Property(e => e.CategoryDescription).HasColumnName("Category Description");
            entity.Property(e => e.CategoryName)
                .HasMaxLength(50)
                .HasColumnName("Category Name");
        });

        modelBuilder.Entity<ShopProductImageTable>(entity =>
        {
            entity.HasKey(e => e.ProductImageId).HasName("PK_Shop.商品圖片表");

            entity.ToTable("Shop.Product Image Table");

            entity.Property(e => e.ProductImageId).HasColumnName("Product Image ID");
            entity.Property(e => e.ProductId).HasColumnName("Product ID");
            entity.Property(e => e.ProductPhoto).HasColumnName("Product Photo");

            entity.HasOne(d => d.Product).WithMany(p => p.ShopProductImageTable)
                .HasForeignKey(d => d.ProductId)
                .HasConstraintName("FK_Products.Image_Products");
        });

        modelBuilder.Entity<ShopProductReviewTable>(entity =>
        {
            entity.HasKey(e => e.ProductReviewId).HasName("PK_Shop.商品評論表");

            entity.ToTable("Shop.Product Review Table");

            entity.Property(e => e.ProductReviewId).HasColumnName("Product Review ID");
            entity.Property(e => e.MemberId).HasColumnName("Member ID");
            entity.Property(e => e.OrderId).HasColumnName("OrderID");
            entity.Property(e => e.ProductId).HasColumnName("Product ID");
            entity.Property(e => e.ProductRating)
                .HasColumnType("decimal(18, 1)")
                .HasColumnName("Product Rating");
            entity.Property(e => e.ReviewContent).HasColumnName("Review Content");
            entity.Property(e => e.ReviewTime).HasColumnType("datetime");

            entity.HasOne(d => d.Member).WithMany(p => p.ShopProductReviewTable)
                .HasForeignKey(d => d.MemberId)
                .HasConstraintName("FK_Shop.商品評論表_Shop.會員資訊");

            entity.HasOne(d => d.Order).WithMany(p => p.ShopProductReviewTable)
                .HasForeignKey(d => d.OrderId)
                .HasConstraintName("FK_Shop.Product Review Table_Shop.Order Total Table");

            entity.HasOne(d => d.Product).WithMany(p => p.ShopProductReviewTable)
                .HasForeignKey(d => d.ProductId)
                .HasConstraintName("FK_Products.Reviews_Products");
        });

        modelBuilder.Entity<ShopProductSpecification>(entity =>
        {
            entity.ToTable("Shop.ProductSpecification");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.Disable).HasColumnName("disable");
            entity.Property(e => e.ProductId).HasColumnName("ProductID");

            entity.HasOne(d => d.Product).WithMany(p => p.ShopProductSpecification)
                .HasForeignKey(d => d.ProductId)
                .HasConstraintName("FK_Shop.ProductSpecification_Shop.Product Total");
        });

        modelBuilder.Entity<ShopProductSupplier>(entity =>
        {
            entity.HasKey(e => e.SupplierId).HasName("PK_Shop.產品供應商");

            entity.ToTable("Shop.Product Supplier");

            entity.Property(e => e.SupplierId).HasColumnName("Supplier ID");
            entity.Property(e => e.CompanyAddress)
                .HasMaxLength(50)
                .HasColumnName("Company Address");
            entity.Property(e => e.CompanyName)
                .HasMaxLength(50)
                .HasColumnName("Company Name");
            entity.Property(e => e.ContactPhone)
                .HasMaxLength(50)
                .HasColumnName("Contact Phone");
        });

        modelBuilder.Entity<ShopProductTotal>(entity =>
        {
            entity.HasKey(e => e.ProductId).HasName("PK_Products");

            entity.ToTable("Shop.Product Total");

            entity.Property(e => e.ProductId).HasColumnName("Product ID");
            entity.Property(e => e.Attributes).HasMaxLength(50);
            entity.Property(e => e.Discount).HasColumnType("decimal(18, 0)");
            entity.Property(e => e.OffDay)
                .HasColumnType("datetime")
                .HasColumnName("offDay");
            entity.Property(e => e.ProductCategoryId).HasColumnName("Product Category ID");
            entity.Property(e => e.ProductDescription).HasColumnName("Product Description");
            entity.Property(e => e.ProductName)
                .HasMaxLength(50)
                .HasColumnName("Product Name");
            entity.Property(e => e.ProductPrice)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("Product Price");
            entity.Property(e => e.ProductSpId).HasColumnName("ProductSpID");
            entity.Property(e => e.PushToShop).HasColumnName("pushToShop");
            entity.Property(e => e.ReleaseDate)
                .HasColumnType("date")
                .HasColumnName("Release Date");
            entity.Property(e => e.RemainingQuantity).HasColumnName("Remaining Quantity");
            entity.Property(e => e.Size).HasMaxLength(50);
            entity.Property(e => e.SupplierId).HasColumnName("Supplier ID");
            entity.Property(e => e.Weight).HasMaxLength(50);

            entity.HasOne(d => d.ProductCategory).WithMany(p => p.ShopProductTotal)
                .HasForeignKey(d => d.ProductCategoryId)
                .HasConstraintName("FK_Products_Products.Categories");

            entity.HasOne(d => d.ProductSp).WithMany(p => p.ShopProductTotal)
                .HasForeignKey(d => d.ProductSpId)
                .HasConstraintName("FK_Shop.Product Total_Shop.ProductSpecification");

            entity.HasOne(d => d.Supplier).WithMany(p => p.ShopProductTotal)
                .HasForeignKey(d => d.SupplierId)
                .HasConstraintName("FK_Shop.商品總表_Shop.產品供應商");
        });

        modelBuilder.Entity<ShopReplyData>(entity =>
        {
            entity.HasKey(e => e.ReplyId).HasName("PK_Shop.回覆資料表");

            entity.ToTable("Shop.Reply Data");

            entity.Property(e => e.ReplyId).HasColumnName("Reply ID");
            entity.Property(e => e.ComplaintCaseId).HasColumnName("Complaint Case ID");
            entity.Property(e => e.MessageRecipientContent)
                .IsRequired()
                .HasColumnName("Message (Recipient) Content");
            entity.Property(e => e.ReceiverIdOfficial).HasColumnName("Receiver ID (Official)");
            entity.Property(e => e.SentTime)
                .HasColumnType("datetime")
                .HasColumnName("Sent Time");

            entity.HasOne(d => d.ComplaintCase).WithMany(p => p.ShopReplyData)
                .HasForeignKey(d => d.ComplaintCaseId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Shop.回覆資料表_Shop.會員客訴案件表");

            entity.HasOne(d => d.ReceiverIdOfficialNavigation).WithMany(p => p.ShopReplyData)
                .HasForeignKey(d => d.ReceiverIdOfficial)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Shop.回覆資料表_Shop.Game 後臺管理員資料");
        });

        modelBuilder.Entity<ShopReturnDataTable>(entity =>
        {
            entity.ToTable("Shop.Return Data Table");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.OrderId).HasColumnName("Order ID");
            entity.Property(e => e.ProcessingStatusId).HasColumnName("Processing Status ID");
            entity.Property(e => e.ProductId).HasColumnName("Product ID");
            entity.Property(e => e.ReturnContent).HasColumnName("Return Content");
            entity.Property(e => e.ReturnCount).HasColumnName("Return Count");
            entity.Property(e => e.ReturnDate)
                .HasColumnType("datetime")
                .HasColumnName("Return Date");
            entity.Property(e => e.ReturnImage).HasColumnName("Return Image");
            entity.Property(e => e.ReturnReasonId).HasColumnName("Return Reason ID");

            entity.HasOne(d => d.ProcessingStatus).WithMany(p => p.ShopReturnDataTable)
                .HasForeignKey(d => d.ProcessingStatusId)
                .HasConstraintName("FK_Shop.Return Data Table_Shop.Return Status Data Table");

            entity.HasOne(d => d.ReturnReason).WithMany(p => p.ShopReturnDataTable)
                .HasForeignKey(d => d.ReturnReasonId)
                .HasConstraintName("FK_Shop.Return Data Table_Shop.Return Reason Data Table");
        });

        modelBuilder.Entity<ShopReturnReasonDataTable>(entity =>
        {
            entity.HasKey(e => e.ReturnReasonId);

            entity.ToTable("Shop.Return Reason Data Table");

            entity.Property(e => e.ReturnReasonId).HasColumnName("Return Reason ID");
            entity.Property(e => e.ReturnReason).HasColumnName("Return Reason");
        });

        modelBuilder.Entity<ShopReturnStatusDataTable>(entity =>
        {
            entity.HasKey(e => e.ProcessingStatusId);

            entity.ToTable("Shop.Return Status Data Table");

            entity.Property(e => e.ProcessingStatusId).HasColumnName("Processing Status ID");
            entity.Property(e => e.StatusName).HasColumnName("Status Name");
        });

        modelBuilder.Entity<ShopRoom>(entity =>
        {
            entity.HasKey(e => e.RoomId);

            entity.ToTable("Shop.Room");

            entity.Property(e => e.RoomId).HasColumnName("RoomID");
            entity.Property(e => e.CheckInDate)
                .HasColumnType("datetime")
                .HasColumnName("checkInDate");
            entity.Property(e => e.CheckOffDate)
                .HasColumnType("datetime")
                .HasColumnName("checkOffDate");
            entity.Property(e => e.ProductId).HasColumnName("Product ID");

            entity.HasOne(d => d.Product).WithMany(p => p.ShopRoom)
                .HasForeignKey(d => d.ProductId)
                .HasConstraintName("FK_Shop.Room_Shop.Product Total");
        });

        modelBuilder.Entity<ShopShippingMethod>(entity =>
        {
            entity.HasKey(e => e.ShippingMethodId);

            entity.ToTable("Shop.Shipping Method");

            entity.Property(e => e.ShippingMethodId).HasColumnName("Shipping Method ID");
            entity.Property(e => e.ShippingMethodName)
                .HasMaxLength(50)
                .IsFixedLength()
                .HasColumnName("Shipping Method Name");
            entity.Property(e => e.Shippment).HasColumnType("decimal(18, 0)");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}